@page "/productos"
@using blazor.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    .btn-custom{
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<h3>Productos de Postgres onCloud</h3>

<div class="row">
    <div class="col">
        <button @onclick="AgregarProducto" class="btn btn-success">Agregar Producto</button>
    </div>

    <div class="col-md-auto">
        <input type="text" class="form-control mb-2 mr-sm-2" @bind="searchProducto" placeholder="Buscar por producto" />
    </div>

    <div class="col col-lg-2">
        <button type="button" class="btn btn-warning mr-sm-2 mb-2" @onclick="@(async() => await SearchProductos())">
            Buscar
        </button>
    </div>
</div>

@if(productos!.Count <=0)
{
    <p><em>@messageLoading</em></p>
}
else {
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Descripcion</th>
                <th>Precio</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var product in productos)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Nombre</td>
                    <td>@product.Descripcion</td>
                    <td>@product.Precio</td>
                    <td>
                        <button @onclick="() => EditarProducto(product.Id)" class="btn btn-primary">Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn btn-custom" @onclick="@(async () => NavigateToPage("anterior"))">
            Anterior
        </button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;

            <button class="btn btn-custom @(currentPage==curPage?"btn-danger":"")" @onclick="@(async() => await RefreshRecord(currentPage))">
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick="@(async () => NavigateToPage("siguiente"))">
            Siguiente
        </button>
    </div>
}

@code {
    List<Models.Producto>? productos = new List<Models.Producto>();

    private string searchProducto = string.Empty;
    private int totalRecords;
    private int totalPages;
    private int curPage;
    private int pageSize;
    private int startPage;
    private int endPage;
    private string messageLoading = "Cargando productos ...";

    public async Task RefreshRecord(int currentPage)
    {
        curPage = currentPage;
        searchProducto = searchProducto.Trim();

        Pagination pagination = (await Http.GetFromJsonAsync<Pagination>(
            $@"/api/producto/pagination?pageNumber={curPage}&search={searchProducto}"))!;

        productos = pagination!.Results;
        totalRecords = pagination.TotalNumberOfRecords;
        totalPages = pagination.TotalNumberOfPages;

        this.StateHasChanged();
    }

    public void NavigateToPage(string direccion)
    {
        if (direccion == "siguiente")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPageSize("forward");
                }

                curPage += 1;
            }
        }
        else if (direccion == "anterior")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPageSize("back");
                }

                curPage -= 1;
            }
        }  

        RefreshRecord(curPage).GetAwaiter();
    }

    public async Task SearchProductos()
    {
        pageSize = 10;
        curPage = 1;
        searchProducto = searchProducto.Trim();

        Pagination pagination = (await Http.GetFromJsonAsync<Pagination>(
            $@"/api/producto/pagination?pageNumber={curPage}&search={searchProducto}"))!;

        productos = pagination!.Results;

        if (productos.Any())
        {
            messageLoading = "No existen productos con este criterio de busqueta";
        }

        totalRecords = pagination.TotalNumberOfRecords;
        totalPages = pagination.TotalNumberOfPages;
        startPage = 1;

        if ((endPage + pageSize) < totalPages)
        {
            endPage = startPage + pageSize - 1;
        }
        else
        {
            endPage = totalPages;
        }

        this.StateHasChanged();
    }

    public void SetPageSize(string direccion)
    {
        if (direccion == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;

            if ((endPage + pageSize) < totalPages)
            {
                endPage = startPage + pageSize -1;
            }
            else
            {
                endPage = totalPages;
            }
        }
        else if (direccion == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pageSize;
        }

        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        curPage = 1;
        pageSize = 10;

        Pagination pagination = (await Http.GetFromJsonAsync<Pagination>("/api/producto/pagination"))!;
        productos = pagination.Results;

        totalRecords = pagination.TotalNumberOfRecords;
        totalPages = pagination.TotalNumberOfPages;
        SetPageSize("forward");
    }

    void AgregarProducto()
    {
        NavigationManager.NavigateTo("/producto");
    }

    void EditarProducto(int id)
    {
        NavigationManager.NavigateTo($"/producto/{id}");
    }
}
